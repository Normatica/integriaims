<?php
// INTEGRIA IMS 
// http://www.integriaims.com
// ===========================================================
// Copyright (c) 2007-2008 Sancho Lerena, slerena@gmail.com
// Copyright (c) 2007-2008 Artica, info@artica.es

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// (LGPL) as published by the Free Software Foundation; version 2

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

/* Original POP3 code by bastien koert */
/* Taken from http://www.weberdev.com/get_example-4015.html */

global $config;

include_once ($config["homedir"]."/include/functions_workunits.php");

function connect ($server, $port) {

	$buffer = 512;

        //    Opens a socket to the specified server. Unless overridden,
        //    port defaults to 110. Returns true on success, false on fail

        // If MAILSERVER is set, override $server with it's value
        $e_server = $server;

        if(!$fp = fsockopen($e_server, $port, $errno, $errstr)){
            $error = "POP3 connect: Error [$errno] [$errstr]";
	    echo "ERROR: $error \n";
            return false;
        }

        stream_set_blocking($fp, true);
        update_timer();
        $reply = fgets($fp, $buffer);
        $reply = strip_clf($reply);
        if(!is_ok($reply))
        {
            $error = "POP3 connect: Error [$reply]";
	    echo "ERROR: $error \n";
            return false;
        }

        $BANNER = parse_banner($reply);
        $RFC1939 = noop($fp);
        if($RFC1939)
        {
            $error = "POP3: premature NOOP OK, NOT an RFC 1939 Compliant server";
            echo "ERROR: $error \n";
            quit($fp);
            return false;
        }
        return $fp;
}// end function

function noop ($fp)
    {

        $cmd = "NOOP";
        $reply = send_cmd($cmd, $fp);
        if(!is_ok($reply))
        {
            return false;
        }
        return true;
    }// end function

function user ($user, $fp)
    {
        // Sends the USER command, returns true or false

        if(empty($user))
        {
            $error = "POP3 user: no user id submitted";
            return false;
        }

        $reply = send_cmd("USER $user", $fp);
        if(!is_ok($reply))
        {
            $error = "POP3 user: Error [$reply]";
            return false;
        }
        return true;
    }// end function

function pass ($pass, $fp)
    {
        // Sends the PASS command, returns # of msgs in mailbox,
        // returns false (undef) on Auth failure

        if(empty($pass))
        {
            $error = "POP3 pass: no password submitted";
            return false;
        }

        $reply = send_cmd("PASS $pass", $fp);
        if(!is_ok($reply))
        {
            $error = "POP3 pass: authentication failed [$reply]";
            quit($fp);
            return false;
        }
        //    Auth successful.
        //echo "<br>User Authenticated<br>";
        $count = last("count", $fp);
        $COUNT = $count;
        $RFC1939 = noop($fp);
        if(!$RFC1939)
        {
            $error = "POP3 pass: NOOP failed. Server not RFC 1939 compliant";
            quit($fp);
            return false;
        }
        return $count;
    }// end function

function login ($login = "", $pass = "", $fp)
    {
        // Sends both user and pass. Returns # of msgs in mailbox or
        // false on failure (or -1, if the error occurs while getting
        // the number of messages.)

        if(!user($login, $fp))
        {
            //    Preserve the error generated by user()
            return false;
        }

        $count = pass($pass, $fp);
        if( (!$count) or ($count == -1) )
        {
            //    Preserve the error generated by last() and pass()
            return "-1";
        }
        return $count;
    }// end function

function top ($msgNum, $numLines = "0", $fp)
    {
        //    Gets the header and first $numLines of the msg body
        //    returns data in an array with each returned line being
        //    an array element. If $numLines is empty, returns
        //    only the header information, and none of the body.

        update_timer();
	$buffer = 512;

        $cmd = "TOP $msgNum $numLines";
        fwrite($fp, "TOP $msgNum $numLines\r\n");
        $reply = fgets($fp, $buffer);
        $reply = $strip_clf($reply);
        
        if(!is_ok($reply))
        {
            $error = "POP3 top: Error [$reply]";
            return false;
        }

        $count = 0;
        $MsgArray = array();

        $line = fgets($fp,$buffer);
        while ( !preg_match ("/^\.\r\n/",$line))
        {
            $MsgArray[$count] = $line;
            $count++;
            $line = fgets($fp,$buffer);
            if(empty($line))    { break; }
        }

        return $MsgArray;
    }// end function

function pop_list ($msgNum = "", $fp){

        //    If called with an argument, returns that msgs' size in octets
        //    No argument returns an associative array of undeleted
        //    msg numbers and their sizes in octets

	$buffer = 512;

        $Total = $Count;
        if( (!$Total) or ($Total == -1) )
        {
            return false;
        }
        if($Total == 0)
        {
            return array("0","0");
            // return -1;    // mailbox empty
        }

        $update_timer();

        if(!empty($msgNum))
        {
            $cmd = "LIST $msgNum";
            fwrite($fp,"$cmd\r\n");
            $reply = fgets($fp,$buffer);
            $reply = $strip_clf($reply);
            if(!is_ok($reply))
            {
                $error = "POP3 pop_list: Error [$reply]";
                return false;
            }
            list($junk,$num,$size) = explode(" ",$reply);
            return $size;
        }
        $cmd = "LIST";
        $reply = $send_cmd($cmd, $fp);
        if(!is_ok($reply))
        {
            $reply = $strip_clf($reply);
            $error = "POP3 pop_list: Error [$reply]";
            return false;
        }
        $MsgArray = array();
        $MsgArray[0] = $Total;
        for($msgC=1;$msgC <= $Total; $msgC++)
        {
            if($msgC > $Total) { break; }
            $line = fgets($fp,$buffer);
            $line = $strip_clf($line);
            if(preg_match ("/^\./",$line))
            {
                $error = "POP3 pop_list: Premature end of list";
                return false;
            }
            list($thisMsg,$msgSize) = explode(" ",$line);
            settype($thisMsg,"integer");
            if($thisMsg != $msgC)
            {
                $MsgArray[$msgC] = "deleted";
            }
            else
            {
                $MsgArray[$msgC] = $msgSize;
            }
        }
        return $MsgArray;
    }// end function

function get ($msgNum, $fp)
    {
        //    Retrieve the specified msg number. Returns an array
        //    where each line of the msg is an array element.

	$buffer = 512;
        update_timer();

        $cmd = "RETR $msgNum";

        $reply = send_cmd($cmd, $fp);

        if(!is_ok($reply))
        {
            $error = "POP3 get: Error [$reply]";
            return false;
        }

        $count = 0;
        $MsgArray = array();

        $line = fgets($fp,$buffer);
        while ( !preg_match("/^\.\r\n/",$line))
        {
            $MsgArray[$count] = $line;
            $count++;
            $line = fgets($fp,$buffer);
            if(empty($line))    { break; }
        }
        return $MsgArray;
    }// end function

function last ( $type = "count", $fp )
    {
        //    Returns the highest msg number in the mailbox.
        //    returns -1 on error, 0+ on success, if type != count
        //    results in a popstat() call (2 element array returned)

        $last = -1;

        $reply = send_cmd("STAT", $fp);
        if(!is_ok($reply))
        {
            $error = "POP3 last: error [$reply]";
            return $last;
        }

        $Vars = explode(" ",$reply);
        $count = $Vars[1];
        $size = $Vars[2];
        settype($count,"integer");
        settype($size,"integer");
        if($type != "count")
        {

            return array($count,$size);
        }
        return $count;
    }// end function

function resets($fp)
    {
        //    Resets the status of the remote server. This includes
        //    resetting the status of ALL msgs to not be deleted.
        //    This method automatically closes the connection to the server.


        $reply = $send_cmd("RSET", $fp);
        if(!is_ok($reply))
        {
            //    The POP3 RSET command -never- gives a -ERR
            //    response - if it ever does, something truely
            //    wild is going on.

            $error = "POP3 reset: Error [$reply]";
        }
        quit($fp);
        return true;
    }// end function

function send_cmd ( $cmd, $fp )
    {
        //    Sends a user defined command string to the
        //    POP server and returns the results. Useful for
        //    non-compliant or custom POP servers.
        //    Do NOT include the \r\n as part of your command
        //    string - it will be appended automatically.

        //    The return value is a standard fgets() call, which
        //    will read up to $buffer bytes of data, until it
        //    encounters a new line, or EOF, whichever happens first.

        //    This method works best if $cmd responds with only
        //    one line of data.
	$buffer = 512;

        if(!isset($fp))
        {
            $error = "POP3 send_cmd: No connection to server";
            return false;
        }

        if(empty($cmd))
        {
            $error = "POP3 send_cmd: Empty command string";
            return "";
        }

        update_timer();
        fwrite($fp, "$cmd\r\n");
        $reply = fgets($fp, $buffer);
        $reply = strip_clf($reply);
        return $reply;
    }// end function

// **************************************************************
//    Closes the connection to the POP3 server, deleting
//    any msgs marked as deleted.
// **************************************************************

function quit($fp) {
	$buffer = 512;
        $cmd = "QUIT";

        fwrite($fp,"$cmd\r\n");
        $reply = fgets($fp,$buffer);
        $reply = strip_clf($reply);
        fclose($fp);
        return true;
}

// **************************************************************
//    Return true or false on +OK or -ERR
// **************************************************************

function is_ok ($cmd = ""){

        if (empty($cmd)){ 
		return false; 
	}
        if ( preg_match ("/^\+OK/", $cmd ) ){
		return true; 
	}
        return false;
}


// **************************************************************
//      Strips \r\n from server responses
// **************************************************************

function strip_clf ($text = ""){
      
        if(empty($text)) { return $text; }
        $stripped = preg_replace("/\r/","",$text);
        $stripped = preg_replace("/\n/","",$stripped);
        return $stripped;
}


// **************************************************************
//
// **************************************************************

function parse_banner ( $server_text ){
        $outside = true;
        $banner = "";
        $length = strlen($server_text);
        for($count =0; $count < $length; $count++)
        {
            $digit = substr($server_text,$count,1);
            if(!empty($digit))
            {
                if( (!$outside) and ($digit != '<') and ($digit != '>') )
                {
                    $banner .= $digit;
                }
                if ($digit == '<')
                {
                    $outside = false;
                }
                if($digit == '>')
                {
                    $outside = true;
                }
            }
        }
        $banner = strip_clf($banner);    // Just in case
        return "<$banner>";
}

// **************************************************************
//    Returns an array of 2 elements. The number of undeleted
//    msgs in the mailbox, and the size of the mbox in octets.
// **************************************************************

function popstat (){

        $PopArray = last("array");

        if($PopArray == -1) { return false; }

        if( (!$PopArray) or (empty($PopArray)) )
        {
            return false;
        }
        return $PopArray;
}


// **************************************************************
//    uidl - Return UIDL of msg specified.
// **************************************************************

function uidl ($msgNum = "", $fp) {

        //    Returns the UIDL of the msg specified. If called with
        //    no arguments, returns an associative array where each
        //    undeleted msg num is a key, and the msg's uidl is the element
        //    Array element 0 will contain the total number of msgs

        global $buffer, $Count;

        if(!empty($msgNum))
        {
            $cmd = "UIDL $msgNum";
            $reply = send_cmd($cmd);
            if(!is_ok($reply))
            {
                $error = "POP3 uidl: Error [$reply]";
                return false;
            }
            list ($ok,$num,$myUidl) = explode(" ",$reply);
            return $myUidl;
        }
        else
        {
            //update_timer();

            $UIDLArray = array();
            $Total = $Count;
            $UIDLArray[0] = $Total;

            if ($Total < 1)
            {
                return $UIDLArray;
            }
            $cmd = "UIDL";
            fwrite($fp, "UIDL\r\n");
            $reply = fgets($fp, $buffer);
            $reply = strip_clf($reply);

            if(!is_ok($reply))
            {
                $error = "POP3 uidl: Error [$reply]";
                return false;
            }

            $line = "";
            $count = 1;
            $line = fgets($fp,$buffer);
            while ( !preg_match("/^\.\r\n/",$line))
            {
                if(preg_match("/^\.\r\n/",$line))
                {
                    break;
                }
                list ($msg,$msgUidl) = explode(" ",$line);
                $msgUidl = strip_clf($msgUidl);
                if($count == $msg)
                {
                    $UIDLArray[$msg] = $msgUidl;
                }
                else
                {
                    $UIDLArray[$count] = "deleted";
                }
                $count++;
                $line = fgets($fp,$buffer);
            }
        }
        return $UIDLArray;
}

// **************************************************************
//    Flags a specified msg as deleted. The msg will not
//    be deleted until a quit() method is called.
// **************************************************************

function delete ($msgNum = "", $fp){

        if(empty($msgNum))
        {
            $error = "POP3 delete: No msg number submitted";
            return false;
        }
        $reply = send_cmd("DELE $msgNum", $fp);
        if(!is_ok($reply))
        {
            $error = "POP3 delete: Command failed [$reply]";
            return false;
        }
        return true;
}


function update_timer(){
     global $timeout;
     set_time_limit($timeout);
}


// **************************************************************
//  message_parse : Do the Integria processing POP mail
// **************************************************************

function message_parse ($MsgOne, $msgNo, $fp, $delete = true) {
	global $config;

	$body = '';  // get the body of the message into 1 variable
	$pure_body = ""; // Body without no quoted text
	$subjects = ''; // get the subject of the email
	$dates  = ''; // get the date of the email
	$body_start_key = false; // body starts at blank line, blank line is separator for from headers to body
	$base64Flag = false; // flag to handle base 64 encoding by email systems.
	$mark_begin = "";
	$subject_start = 0;
	$subject_processed = 0;
	$purebody = "";
	$message_result = array();
	$matches = array();

	foreach ($MsgOne as $key => $value){
	      
		if (trim($value) == "Content-Transfer-Encoding: base64"){
			$base64Flag = true;
		}

		if (preg_match("/^Subject\:([.]*)/", $value, $matches)){
			$subjects = substr($value, 9);
			$subject_start = 1;
			continue;
		}

		if ($subject_start == 1){
			if ((strlen(stristr($value, "Subject"))==0) && (!preg_match("/^[\_\-A-Za-z]+\:/", $value, $subject))) {
			        $subjects .= $value;
				continue;
			} else {
				$subject_start = 0;
				$subject_processed = 1;
			}		
		} 

		//get the date of the email
		if (strlen(stristr($value, "Date"))>1){
		  $dates = trim(stristr($value, " "));
		    $date_key = $key;
		}// end if

		if ($mark_begin != ""){
			if ($value == $mark_begin){
				break;
			}
		}

		//the body
		if (strlen(trim($value))==0){
		  if ($body_start_key == false){ 
			$body_start_key = true; 
		  } //set the start key for the body
		}

		// Locate header for text/plain msg part
		// Some like: 
		// --0016e6d7e89a51585e047eade59e 
		// Content-Type: text/plain; charset=ISO-8859-1 
		// Content-Transfer-Encoding: quoted-printable

		if (preg_match("/\-\-[a-z0-9]+/",$value)){
			$mark_begin = $value;
			$value = "<code>";
		}

		if (preg_match("/Content\-Type/", $value)){
			$value ="<code>";
		}

		if (preg_match("/Content\-Transfer\-Encoding/", $value)){
			$value ="<code>";
		}

		// Enter ending carriage return or skip if its a special entry
		if (($body_start_key == true) && ($value != "<code>")) {
			$body .= trim($value);
			if (!preg_match("/^\s*\>/", $value)){
				$purebody .= trim($value);
				if ($base64Flag == false){ 
					$purebody .= "\r\n";
					continue;
				}	
			}

			if ($base64Flag == false){ 
				$body .="\r\n"; 
		  	}
		}

	} // foreach

	if ($base64Flag == true) {
		$purebody = base64_decode($purebody);
	}

	$subjects = mb_decode_mimeheader($subjects);
		
	// Get the TicketID code, for example: [TicketID#2/bfd5d] 
	if (preg_match("/TicketID\#([0-9]+)\/([a-z0-9]+)\/([a-zA-Z0-9]+)/", $subjects, $matches)){
		$ticket_id = $matches[1];
		$ticket_id_code = $matches[2];
		$user = $matches[3];
		if (substr(md5($ticket_id . $config["smtp_pass"]. $user),0,5) == $ticket_id_code){
			// echo "TICKET ID #$ticket_id VALIDATED !!<br>";
			create_workunit ($ticket_id, $purebody, $user, 0,  0, "", 1);
		}
	}
	
	
	//delete the message
	if ($delete == true)
		delete($msgNo, $fp);
	$result = array();
	$result["subject"] = $subjects;
	$result["body"] = $purebody;
	return ($result);
} 

?>
