<?php
// Trick to let users see the code instead of runnning the script
// if no POST parameter is received and showSource is in the query string
if ($_SERVER['REQUEST_METHOD'] != 'POST' && isset($_GET['showSource']))
{
  highlight_file(__FILE__);
  die();
}
    include("xmlrpc/xmlrpc.inc");
    include("xmlrpc/xmlrpcs.inc");
    include("xmlrpc/xmlrpc_wrappers.inc");
    include_once("functions_xmlrpc.php");



// It is always a good idea to hide PHP processing errors from the xml-rpc client
// for production xmlrpc servers:
// since errors generated will be part of the xml-rpc response that clients will receive,
// a simple PHP warning message is enough to disrupt the xml we send back
ini_set('display_errors', 0);

    /**
    * Used to test object methods in dispatch maps
    */
    class xmlrpc_server_methods_container
    {
        /*
        * Method used to test logging of php warnings generated by user functions.
        */
        function phpwarninggenerator($m)
        {
            $a = $b; // this triggers a warning in E_ALL mode, since $b is undefined
            return new xmlrpcresp(new xmlrpcval(1, 'boolean'));
        }
    }
    
    $login_sig=array(array($xmlrpcString, $xmlrpcString, $xmlrpcString));
    $login_doc='Client and server will make a handshake to check client credentials and server availability.';

    function ims_login($m)
    {
        global $xmlrpcerruser, $userNames, $password;
        $err="";
                
        // get the first param
        $usr=$m->getParam(0);  
        // extract the value of the user name
        $usrv=$usr->scalarval();
             
		// get the second param
		$hash=$m->getParam(1);
        // extract the value of the password
        $hashv=$hash->scalarval();

		// look it up in our users array
		// wrap php function, build xmlrpc server
		
		if(usr_db($usrv))
		{
			if(psw_db($usrv, $hashv))
				$login=true;
			else{
				$login = false;
				$err = "The password is incorrect";
			}
		}
		else
		{
			// not, there so complain
			$login=false;
			$err = $usrv ." is not welcome";
		}

        // if we generated an error, create an error return response
        if (!$login)
        {
            return new xmlrpcresp(0, $xmlrpcerruser, $err);
        }
        else
        {
            // otherwise, we create the right response
            // with the true
            return new xmlrpcresp(new xmlrpcval("Welcome ". $usrv ."!!!"));
        }
    }

    $transfer_sig=array(array($xmlrpcString, $xmlrpcString, $xmlrpcString, $xmlrpcInt, $xmlrpcInt, $xmlrpcStruct));
    $transfer_doc='Doing the data transfer including authentification.';

    function ims_transfer($m)
    {
        global $xmlrpcerruser;
        $err="";
                
        // get the first param
        $usr=$m->getParam(0);  
        // extract the value of the user name
        $usrv=$usr->scalarval();
             
		// get the second param
		$hash=$m->getParam(1);
        // extract the value of the password
        $hashv=$hash->scalarval();
        
        $f=new xmlrpcmsg('ims_login',
		array(new xmlrpcval($usrv, "string"), new xmlrpcval($hashv, "string"))
		);
        
        $log = ims_login($f);
        
        if($log->faultCode()){
            return new xmlrpcresp(0, $xmlrpcerruser, "Login fails for ". $usrv);
        }
        else
        {
			// get the third param
			$start_datetime=$m->getParam(2);
			// extract the value of the start datetime
			$start_datetimev=$start_datetime->scalarval();
			
			// get the fourth param
			$end_datetime=$m->getParam(3);
			// extract the value of the end datetime
			$end_datetimev=$end_datetime->scalarval();
			
			// extract the values of data struct and store it
						
			$msg = add_app_activities($usrv, $start_datetimev, $end_datetimev, get_xmlrpcstruct_array($m->getParam(4)));
			
			return new xmlrpcresp(new xmlrpcval($msg));
        }
    }
    
    $status_sig=array(array($xmlrpcString, $xmlrpcString, $xmlrpcString));
    $status_doc='Client and server will make a handshake to check client credentials and server availability.';

    function ims_status($m)
     {
        global $xmlrpcerruser, $lastrec;
        $err="";
                
        // get the first param
        $usr=$m->getParam(0);  
        // extract the value of the user name
        $usrv=$usr->scalarval();
             
		// get the second param
		$hash=$m->getParam(1);
        // extract the value of the password
        $hashv=$hash->scalarval();
        
        $f=new xmlrpcmsg('ims_login',
		array(new xmlrpcval($usrv, "string"), new xmlrpcval($hashv, "string"))
		);
        
        $log = ims_login($f);
        
        if($log->faultCode()){
            return new xmlrpcresp(0, $xmlrpcerruser, "Login fails");
        }
        else
        {
			
			$msg = get_lastdate($usrv);
			
			return new xmlrpcresp(new xmlrpcval($msg, 'dateTime.iso8601'));
        }
    }
    
    $checklog_sig=array(array($xmlrpcString, $xmlrpcString));
    $checklog_doc='Client and server will make a handshake to check client credentials and server availability.';
    
    $o=new xmlrpc_server_methods_container;
    $a=array(
        "ims_login" => array(
            "function" => "ims_login",
            "signature" => $login_sig,
            "docstring" => $login_doc
        ),
        "ims_transfer" => array(
            "function" => "ims_transfer",
            "signature" => $transfer_sig,
            "docstring" => $transfer_doc
        ),
        "ims_status" => array(
            "function" => "ims_status",
            "signature" => $status_sig,
            "docstring" => $status_doc
        )
    );

    if($_SERVER['REQUEST_METHOD'] != 'POST' || $_SERVER['CONTENT_TYPE'] == 'application/x-www-form-urlencoded')
    {
        // on GET requests or requests generated by web forms, generate HTML docs
        $s = new documenting_xmlrpc_server($a, false);
    }
    else
    {
        if (strpos($_SERVER['CONTENT_TYPE'], 'text/xml') === 0)
            $s = new xmlrpc_server($a, false);
        else
            $s = new jsonrpc_server($a, false);
    }
    $s->setdebug(2);
    $s->compress_response = true;
    $s->editorpath = 'jsxmlrpc/debugger/'; //enable link to js editor of content
    $s->service();
    // that should do all we need!
?>
